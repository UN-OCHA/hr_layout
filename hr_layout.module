<?php
/**
 * @file
 * Code for the Layout feature.
 */

include_once 'hr_layout.features.inc';

/**
 * Return a list of configurations for menu blocks.
 *
 * Modules that want to have menu block configurations exported to code should
 * provide them using this hook.
 *
 * @see menu_tree_build() for a description of the config array.
 */
function hr_layout_menu_block_blocks() {
  return array(
    // The array key is the block id used by menu block.
    'secondary-nav' => array(
      // Use the array keys/values described in menu_tree_build().
      'menu_name'   => 'main-menu',
      'parent_mlid' => 0,
      'title_link'  => FALSE,
      'admin_title' => 'Secondary navigation',
      'level'       => 2,
      'follow'      => 0,
      'depth'       => 1,
      'expanded'    => FALSE,
      'sort'        => FALSE,
    ),
  );
}

function hr_layout_block_info() {
  $blocks['hr_layout_checkin'] = array(
    'info' => t('Checkin block'),
  );
  $blocks['hr_layout_login'] = array(
    'info' => t('HR Login block'),
  );
  $blocks['hr_layout_create_links'] = array(
    'info' => t('OG Create links'),
  );
  return $blocks;
}

function hr_layout_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'hr_layout_checkin':
      $block['content'] = '';
      if (module_exists('og_context')) {
        $gid = og_context_determine_context('node');
        if (!empty($gid)) {
          $og_group = entity_load('node', array($gid));
          $og_group = $og_group[$gid];
          if (!og_is_member('node', $gid)) {
            if ($og_group->type == 'hr_operation') {
              $block['content'] = '<!-- Single button -->
                <div class="btn-group">
                  <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                    '.t('Check-in').' <span class="caret"></span>
                  </button>
                  <ul class="dropdown-menu" role="menu">
                    <li>'.l(t('As In-country/emergency responder'), 'group/node/'.$gid.'/subscribe/field_responder_in').'</li>
                    <li>'.l(t('As follower'), 'group/node/'.$gid.'/subscribe/og_user_node').'</li>
                  </ul>
                </div>';
            }
            else {
              $block['content'] = '<button type="button" class="btn btn-default">'.l(t('Check-in'), 'group/node/'.$gid.'/subscribe/og_user_node').'</button>';
            }
          }
          else {
            $block['content'] = '<button type="button" class="btn btn-default">'.l(t('Check out'), 'group/node/'.$gid.'/unsubscribe').'</button>';
          }
          $uri = entity_uri('node', $og_group);
          $variables['og_group'] = l($og_group->title, $uri['path'], $uri['options']);
        }
      }
      break;
    case 'hr_layout_create_links':
      $block['content'] = hr_layout_create_links();
      break;
    case 'hr_layout_login':
      $block['content'] = '';
      if (!user_is_logged_in()) {
        $block['content'] = '<button type="button" class="btn btn-default">'.l(t('Log in'), 'user/login').'</button>';
      }
      break;
  }
  return $block;
}

function hr_layout_create_links() {
  $button = '';
  $group = og_context();

  if (isset($group['group_type']) && isset($group['gid'])) {
    $types = array();
    foreach (node_type_get_types() as $type) {
      if (og_is_group_content_type('node', $type->type)) {
        $types[$type->type] = $type->type;
      }
    }

    $content = og_node_create_links($group['group_type'], $group['gid'], OG_AUDIENCE_FIELD, NULL, $types);
    if (!empty($content['og_node_create_links']['#items'])) {
      $button = '<div class="btn-group">
        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
          <span class="glyphicon glyphicon-plus"></span>
        </button>
        <ul class="dropdown-menu" role="menu">';
      foreach ($content['og_node_create_links']['#items'] as $item) {
        $button .= '<li>'.$item['data'].'</li>';
      }
      $button .= '</ul></div>';
    }
  }

  return $button;
}
