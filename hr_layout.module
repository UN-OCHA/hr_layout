<?php
/**
 * @file
 * Code for the Layout feature.
 */

include_once 'hr_layout.features.inc';

/**
 * Implements hook_ctools_plugin_directory()
 */
function hr_layout_ctools_plugin_directory($module, $plugin) {
  if ($module == "panels" && in_array($plugin, array('styles'))) {
    return "plugins/$plugin";
  }
}

function hr_layout_block_info() {
  $blocks['hr_layout_checkin'] = array(
    'info' => t('Checkin block'),
  );
  $blocks['hr_layout_login'] = array(
    'info' => t('HR Login block'),
  );
  $blocks['hr_layout_create_links'] = array(
    'info' => t('OG Create links'),
  );
  $blocks['hr_layout_space_links'] = array(
    'info' => t('Space links'),
  );
  $blocks['hr_layout_share_links'] = array(
    'info' => t('Share links'),
  );
  return $blocks;
}

function hr_layout_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'hr_layout_checkin':
      $block['content'] = '';
      if (user_is_logged_in()) {
        $gid = og_context_determine_context('node');
        if (!empty($gid)) {
          $og_group = entity_load('node', array($gid));
          $og_group = $og_group[$gid];
          if (!og_is_member('node', $gid)) {
            if (og_user_access('node', $gid, 'subscribe') || og_user_access('node', $gid, 'subscribe without approval')) {
              if ($og_group->type == 'hr_operation') {
                $block['content'] = '<!-- Single button -->
                  <div class="btn-group">
                    <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                      '.t('Check-in').' <span class="caret"></span>
                    </button>
                    <ul class="dropdown-menu" role="menu">
                      <li>'.l(t('As In-country/emergency responder'), 'group/node/'.$gid.'/subscribe/field_responder_in', array('query' => array(OG_AUDIENCE_FIELD => $gid))).'</li>
                      <li>'.l(t('As support/desk officer'), 'group/node/'.$gid.'/subscribe/og_user_node').'</li>
                    </ul>
                  </div>';
              }
              else {
                $block['content'] = l(t('Check-in'), 'group/node/'.$gid.'/subscribe/og_user_node', array('attributes' => array('class' => array('btn', 'btn-default'))));
              }
            }
          }
          else {
            $block['content'] = l(t('Check out'), 'group/node/'.$gid.'/unsubscribe', array('attributes' => array('class' => array('btn', 'btn-default'))));
          }
          $uri = entity_uri('node', $og_group);
          $variables['og_group'] = l($og_group->title, $uri['path'], $uri['options']);
        }
      }
      break;
    case 'hr_layout_create_links':
      $block['content'] = hr_layout_create_links();
      break;
    case 'hr_layout_login':
      $block['content'] = '';
      if (!user_is_logged_in()) {
        $block['content'] = l(t('Log in'), 'user/login', array('attributes' => array('class' => array('btn', 'btn-default')), 'query' => drupal_get_destination()));
      }
      break;
    case 'hr_layout_space_links':
      $block['content'] = '';
      $context = og_context();
      if (!empty($context) && $context['group_type'] == 'node') {
        $gid = $context['gid'];
        $node = node_load($gid);
        node_build_content($node);
        $view = $node->content;
        if (isset($view['field_email'])) {
          $view['field_email']['#label_display'] = 'hidden';
          $block['content'] .= render($view['field_email']);
        }
        $link_options = array(
          'html' => TRUE,
          'attributes' => array('title' => t('RSS Feed')),
        );
        $block['content'] .= '<div class="space-social-media">';
        $block['content'] .= l('<i class="fa fa-rss-square fa-2x"></i>', 'node/'.$gid.'/feed', $link_options);
        if (isset($view['field_social_media'])) {
          $view['field_social_media']['#label_display'] = 'hidden';
          $block['content'] .= render($view['field_social_media']);
        }
        $block['content'] .= '</div>';
      }
      break;
    case 'hr_layout_share_links':
      $block['content'] = '';
      $context = og_context();
      if (!empty($context) && $context['group_type'] == 'node') {
        $gid = $context['gid'];
        $node = node_load($gid);
        node_build_content($node);
        $view = $node->content;


        $current_title = drupal_get_title();
        $block['content'] .= '<h2><span>' . $current_title . '</span> site</h2>';
        $block['content'] .= '<hr/>';

        //if($arg(1) != $context['gid']) { // If the current node ID & context ID are different, then we know we are in a cluster page
          $block['content'] .= '<div class="cluster"><div class="image"></div>' . $current_title . ' Cluster</div>';
          $block['content'] .= '<hr/>';
        //}

        //Render RSS link
        $link_rss_options = array(
          'html' => TRUE,
          'attributes' => array(
            'title' => t('RSS Feed'),
            'class' => array(
              'btn',
              'btn-primary',
            ),
          ),
        );
        $block['content'] .= '<div class="space-rss">';
        $block['content'] .= l(t('Newsfeed') . '<i class="fa fa-rss-square"></i>', 'node/'.$gid.'/feed', $link_rss_options);
        $block['content'] .= '</div>';

        if (isset($view['field_social_media'])) {
          $link_social_options = array(
            'html' => TRUE,
            'absolute' => TRUE,
            'attributes' => array(
              'class' => array(
                'btn',
                'btn-primary',
              ),
            ),
          );
          foreach($view['field_social_media']['#items'] as $social_media) {
            $format = hr_layout_social_media_link($social_media['url']);
            $link_social_options['attributes']['title'] = $format['text'];
            //Render Social Media link
            $block['content'] .= '<div class="space-social-media">';
            $block['content'] .= l($format['text'] . '<i class="fa ' . $format['icon'] . '"></i>', $social_media['url'], $link_social_options);
            $block['content'] .= '</div>';
          }
        }


        $block['content'] .= '<hr/>';
        $block['content'] .= '<div class="manager">' . t('Managed by') . ': <br/><i>Unicef</i></div>';


        if (isset($view['field_email'])) {
          //Render Email link
          $link_email_options = array(
            'html' => TRUE,
            'absolute' => TRUE,
            'attributes' => array(
              'title' => t('Contact'),
              'class' => array(
                'btn',
                'btn-primary',
              ),
            ),
          );
          $block['content'] .= '<div class="space-email">';
          $block['content'] .= l(t('Contact') . '<i class="fa fa-at"></i>', 'mailto:'.$view['field_email']['#items'][0]['email'], $link_email_options);
          $block['content'] .= '</div>';
        }

      }
      break;
  }
  return $block;
}


/**
 * Return icon name & link title for given URL.
 */
function hr_layout_social_media_link($url) {
  $services = array(
    'facebook.com' => array('icon' => 'fa-facebook', 'text' => 'Facebook'),
    'twitter.com' => array('icon' => 'fa-twitter', 'text' => 'Twitter'),
    'linkedin.com' => array('icon' => 'fa-linkedin', 'text' => 'LinkedIn'),
    'github.com' => array('icon' => 'fa-github', 'text' => 'Github'),
    'pinterest.com' => array('icon' => 'fa-pinterest', 'text' => 'Pinterest'),
    'google.com' => array('icon' => 'fa-google-plus', 'text' => 'Google'),
  );

  $parsed = parse_url($url);
  $chunks = explode('.', $parsed['host']);
  if (count($chunks) == 1)
    $host = $chunks[0];
  else
    $host = $chunks[count($chunks)-2] . '.' . $chunks[count($chunks)-1];

  if (isset($services[$host]))
    return $services[$host];
  else
    return array('icon' => 'fa-globe', 'text' => t('Social Media'));
}

function hr_layout_create_links() {
  global $user;
  $button = '';
  if (!user_is_logged_in()) {
    return $button;
  }

  $gid = NULL;
  $context = og_context();
  if ($context['gid']) {
    $gid = $context['gid'];
  }

  if (!empty($gid)) {
    $bundle_id = 0;
    $groups = entity_load('node', array($gid));
    $group = $groups[$gid];
    if ($group->type == 'hr_bundle') {
      $bundle_id = $group->nid;
      $op_gid = _hr_bundles_get_operation($group->nid);
      $groups = entity_load('node', array($op_gid));
      $group = $groups[$op_gid];
    }
    $types = array();
    foreach (node_type_get_types() as $type) {
      if (og_is_group_content_type('node', $type->type)) {
        $types[$type->type] = $type->type;
      }
    }

    $extra_fields = array();
    if (!empty($bundle_id)) {
      $extra_fields = array('field_bundles' => $bundle_id);
    }
    $content = og_node_create_links('node', $group->nid, OG_AUDIENCE_FIELD, FALSE, $types, $extra_fields);
    if (!empty($content['og_node_create_links']['#items'])) {
      foreach ($content['og_node_create_links']['#items'] as $key => $item) {
        // Unfortunately we have to parse the link path to determine
        // which node type this is for
        $matches = array();
        if (preg_match("/(?<=(node\/add\/)).*(?=\?)/", $item['data'], $matches)) {
          if (isset($matches[0])) {
            // Reformat the node type
            $type = str_replace('-', '_', $matches[0]);
            // See if this node type is disabled for this group
            if (!og_features_component_is_disabled('node', $type, $group)) {
              if ($type != 'hr_contact' || ($type == 'hr_contact' && (og_is_member('node', $group->nid) || in_array('editor', $user->roles)))) {
                $button .= '<li>'.$item['data'].'</li>';
              }
            }
          }
        }
      }
      if (!empty($button)) {
        $button = '<div class="btn-group">
        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
          <i class="fa fa-plus-square"></i>
        </button>
        <ul class="dropdown-menu" role="menu">'.$button.'</ul></div>';
      }
    }
  }

  return $button;
}

/**
 * Implements hook_entity_insert()
 */
function hr_layout_entity_insert($entity, $type) {
  if ($type == 'node') {
    if (og_menu_single_is_enabled_group('node', $entity->type)) {
      // Add a "Latest" menu link
      $mlid = og_menu_single_get_link_mlid('node', $entity->nid);
      $menu_link = array(
        'link_path' => 'node/'.$entity->nid,
        'link_title' => 'Latest',
        'menu_name' => OG_MENU_SINGLE_MENU_NAME,
        'weight' => 0,
        'plid' => $mlid,
      );
      menu_link_save($menu_link);
    }
  }
}

/**
 * Implements hook_menu_alter()
 * HACK: fixes a bug that makes ajax calls stop working when adding an FTS
 * Visualization through "Bean Panes" (Panels)
 */
function hr_layout_menu_alter(&$items) {
  $items['system/ajax']['page callback'] = 'hr_layout_ajax_form_callback';
}

function hr_layout_ajax_form_callback() {
  module_load_include('inc', 'bean_pane', 'plugins/content_types/bean_pane');
  return ajax_form_callback();
}
